# vim: set ft=ruby ts=2 sw=2 et:
# -*- mode: ruby -*-
#
# This is only an example for possible options within vagrant


VAGRANT_API_VERSION = '2'
Vagrant.configure(VAGRANT_API_VERSION) do |config|

  # configure base-image
  config.vm.box = ENV['VAGRANT_BOXNAME'] || 'ubuntu/trusty64'
  # disable update check
  config.vm.box_check_update = false

  # configure your vm's add element to array if you need more than one vm
  #
  #  vms = {
  #    '{{ project_name_nodash }}1 => {
  #      'name' => '{{ project_name_nodash }}-db-01',
  #      'mem' => '256',
  #      'groups' => ['vagrant','db']
  #    },
  #    '{{ project_name_nodash }}2 => {
  #      'name' => '{{ project_name_nodash }}-db-02',
  #      'cpu' => '2',
  #      'mem' => '256',
  #      'groups' => ['vagrant','db']
  #    }
  #    '{{ project_name_nodash }}3 => {
  #      'name' => '{{ project_name_nodash }}-web-01
  #      'port' => {'8080' => '80'}       # {'host' => 'guest'}
  #      'groups' => ['vagrant','web']
  #      'synced' => true
  #    }
  #  }

  vms = {
    '{{ project_name_nodash }}1' => {
      'ip' => '{{ project_ip|default("")}}',
      'port' => '{{ project_port|default("")}}',
      'name' => '{{ project_name_nodash }}',
      'groups' => ['vagrant']
    }
  }

  groups = {}
  host_vars = {}

  (1..vms.count()).each do |machine_id|
    key = "{{ project_name_nodash }}#{machine_id}"

    # definde some defaults
    synced = vms[key]['synced'] || false
    port = vms[key]['port'] || {}
    ip = vms[key]['ip'] || ''
    cpu = vms[key]['cpu'] || 1
    mem = vms[key]['mem'] || 1024


    config.vm.define :"#{vms[key]['name']}" do |d|

      # set hostname
      d.vm.hostname = "#{vms[key]['name']}"

      # if no ip given configure briged network else private
      if ip != ''
        d.vm.network :private_network, :ip => "#{ip}"
      else
        if port.count() > 0
          port.each do |h, g|
            d.vm.network :forwarded_port, :host => "#{h}", :guest => "#{g}"
          end
        else
          d.vm.network :public_network, :use_dhcp_assigned_default_route => true
          d.ssh.forward_agent = true
        end
      end

      # manage synced folders
      # CentOS Box uses  /home/vagrant/sync
      if synced == false
        # default disable synced folder
        d.vm.synced_folder '.', '/vagrant', id: 'vagrant-root', disabled: true
      else
        # put your syncted folder configuration here. see: https://www.vagrantup.com/docs/synced-folders
        # By default, Vagrant will share your project directory (the directory with the Vagrantfile) to /vagrant. (CentOS /home/vagrant/sync)
        #
        # Example: if you want to sync your code with special permissions like web user should be able to read it you can
        # use optional Variables like :owner, :group, :mount_options
        # d.vm.synced_folder '.', '/vagrant', :owner => 'www-data', :group => 'www-data', :mount_options => ["dmode=775,fmode=664"]
      end

      # manage ansible groups
      if vms[key]['groups'].count() > 0
        vms[key]['groups'].each do |group|
          if groups.include?(group) == false
            groups[group] = []
          end
          groups[group].push(vms[key]['name'])
        end
      end

      # add ipadress as host variable
      if ip != ''
        host_vars[vms[key]['name']] = { "slpnhek_ip_address" => "#{ip}"}
      end


      if machine_id == vms.count()
        # for windows users istall this vagrant-plugin: https://github.com/vovimayhem/vagrant-guest_ansible
        provisioner = Vagrant::Util::Platform.windows? ? :guest_ansible : :ansible

        # run ansible provisioning
        d.vm.provision provisioner do |ansible|
          ansible.playbook = 'playbook.yml'
          ansible.tags = ENV['ANSIBLE_TAGS']
          ansible.skip_tags = ENV['ANSIBLE_SKIP_TAGS']
          ansible.verbose = ENV['ANSIBLE_VERBOSE']
          ansible.ask_sudo_pass = ENV['ANSIBLE_SUDO_PASS']
          ansible.galaxy_command = 'ansible-galaxy install --role-file=%{role_file} --roles-path=%{roles_path} --ignore-errors --force'
          ansible.galaxy_role_file = 'requirements.yml'
          ansible.groups = groups
          ansible.limit = ENV['ANSIBLE_LIMIT'] || 'vagrant'
          ansible.host_vars = host_vars

          # add additional raw_arguments
          # ANSIBLE_RAW_ARGUMENTS="--check --diff" vagrant up
          ansible.raw_arguments = Shellwords.shellsplit(ENV['ANSIBLE_RAW_ARGUMENTS']) if ENV['ANSIBLE_RAW_ARGUMENTS']

          # configure dynamic vagrant  inventory
          ::File.directory?('.vagrant/provisioners/ansible/inventory/') do
            ansible.inventory_path = '.vagrant/provisioners/ansible/inventory/'
          end
        end
      end

      d.vm.provider :virtualbox do |v|
        v.customize 'pre-boot', ['modifyvm', :id, '--nictype1', 'virtio']
        v.customize [ 'modifyvm', :id, '--name', "#{vms[key]['name']}", '--memory', "#{mem}", '--cpus', "#{cpu}"]

        # fix for Virtual-Box and synced_folder: http://www.ahtik.com/blog/fixing-your-virtualbox-shared-folder-symlink-error/
        #
        # if synced == true
        #    v.customize ['setextradata', :id, 'VBoxInternal2/SharedFoldersEnableSymlinksCreate/src', '1']
        # end
      end

      d.vm.provider :libvirt do |lv|
        lv.memory = mem
        lv.cpus = cpu
      end
    end
  end
end
